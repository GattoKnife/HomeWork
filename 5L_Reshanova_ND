//  1. Создать протокол «Car» и описать свойства, общие для автомобилей, а также метод действия.

import Foundation
protocol Car {
    var brand: String {get}
    var model: String {get}
    var year: Int {get}
    var trunkCapacity: Int {get}
    var loaded: Int {get set}
    var windows: doAction {get set}
    var doors: doAction {get set}
    var engine: doEngine {get set}
    
    func loadInTrunk(toLoad: Int?)
    func unLoadInTrunk(toUnLoad: Int?)
    
}
enum doAction: String {
    case open = "open"
    case close = "closed"
}

enum doEngine: String {
    case on = "turned on"
    case off = "turned off"
}
//  2. Создать расширения для протокола «Car» и реализовать в них методы конкретных действий с автомобилем: открыть/закрыть окно, запустить/заглушить двигатель и т.д. (по одному методу на действие, реализовывать следует только те действия, реализация которых общая для всех автомобилей).

extension Car {
    mutating func windowSet(windowsAct: doAction){ 
        if windowsAct == .open{
            windows = .open
            print("Windows are \(doAction.open.rawValue) now.")
        } else if windowsAct == .close {
            windows = .close
            windows = .close
            print("Windows are \(doAction.close.rawValue) now.")
        }       else {
            print("Action you choosed is incorrect")
        }
    }
    }
    
extension Car {
    mutating func doorsSet(doorsAct: doAction){ 
        if doorsAct == .open{
            doors = .open
            print("Doors are \(doAction.open.rawValue) now.")
        } else if doorsAct == .close {
            doors = .close
            print("Doors are \(doAction.close.rawValue) now.")
        }       else {
            print("Action you choosed is incorrect")
        }
    }
}
    
extension Car {
    mutating func engineSet(engineAct: doEngine){ 
        if engineAct == .on{
            engine = .on
            print("Your engine is \(doEngine.on.rawValue) now.")
        } else if engineAct == .off {
            engine = .off
            print("Your engine is \(doEngine.off.rawValue) now.")
        }       else {
            print("Action you choosed is incorrect")
        }
    }
}

//  3. Создать два класса, имплементирующих протокол «Car»: tunkCar и sportCar. Описать в них свойства, отличающиеся для спортивного автомобиля и цистерны.

class SportCar: Car {
    var brand: String
    var model: String
    var configuration: configurations //новое свойство спортивного автомобиля
    var year: Int
    var trunkCapacity: Int
    var loaded: Int
    var transmission: transMode //новое свойство спортивного автомобиля
    var windows: doAction
    var doors: doAction
    var engine: doEngine
    
    enum transMode {
        case auto, manual
    }
    enum configurations: String {
        case econom = "ECONOM"
        case classic = "CLASSIC"
        case premium = "PREMIUM"
    }
    
    init (brand: String, model: String, configuration: configurations, year: Int, trunkCapacity: Int, loaded: Int, transmission: transMode){
        self.brand = brand
        self.model = model
        self.year = year
        self.trunkCapacity = trunkCapacity
        self.loaded = loaded
        self.transmission = transmission
        self.configuration = configuration
        windows = .close
        doors = .close
        engine = .off
    }
    func loadInTrunk(toLoad: Int?) {
        if toLoad != nil { 
            self.loaded += toLoad ?? 0 
            if loaded  > trunkCapacity {
                self.loaded -= toLoad ?? 0
                print("You have not enough space for \((toLoad)!)lt in your trunk. You can load only \(trunkCapacity - loaded)lt")
            } else {
                print("Loading done. Fullness of your trunk is \(loaded)lt now.")
            }            
        }
    }
    
    func unLoadInTrunk(toUnLoad: Int?) {
        if toUnLoad != nil { 
            if loaded  < toUnLoad! {
                print("You can't unload such a cargo. You have only \(loaded)lt in your trunk.")
            } else {
                self.loaded -= toUnLoad ?? 0 
                print("Unloading done. Fullness of your trunk is \(loaded)lt now.")
            }            
        }
    }
    
    }
//4.Для каждого класса написать расширение, имплементирующее протокол «CustomStringConvertible».

extension SportCar: CustomStringConvertible {
    var description: String {
        return """
        CAR DESCRIPTION:
        ____________________________________________________
        BRAND AND MODEL:        \(self.brand) / \(self.model)
        CONFIGURATION:          \(self.configuration.rawValue) 
        RELEASE DATE:           \(self.year)
        CAPACITY OF TRUNK:      \(self.trunkCapacity)
        TRANSMISSION:           \(self.transmission)
        ____________________________________________________



        """
    }
}

extension Truck: CustomStringConvertible {
    var description: String {
        return """
        CAR DESCRIPTION:
        ____________________________________________________
        BRAND AND MODEL:        \(self.brand) / \(self.model)
        TYPE:                   \(self.type.rawValue) 
        RELEASE DATE:           \(self.year)
        CAPACITY OF TRUNK:      \(self.trunkCapacity) KG
        FULLNES OF TRUNK:       \(self.loaded)
        FREE SPACE IN TRUNK:    \(100 - (Double(self.loaded) / Double(self.trunkCapacity) * 100).rounded())%
        ____________________________________________________
        



        """
    }
}

class Truck: Car {
    var brand: String
    var model: String
    var type: types //новое свойство грузового автомобиля
    var year: Int
    var trunkCapacity: Int
    var loaded: Int
    var windows: doAction
    var doors: doAction
    var engine: doEngine
    
    
    enum types: String {
        case container = "CONTAINER for ordinary goods"
        case refrigerator = "REFRIGERATOR for frozen goods "
        case tank = "TANK for liquid goods"
    }
    
    init (brand: String, model: String, year: Int, trunkCapacity: Int, loaded: Int, type: types){
        self.brand = brand
        self.model = model
        self.year = year
        self.trunkCapacity = trunkCapacity
        self.loaded = loaded
        self.type = type
        windows = .close
        doors = .close
        engine = .off
    }
    func loadInTrunk(toLoad: Int?) {
        if toLoad != nil { 
            self.loaded += toLoad ?? 0 
            if loaded  > trunkCapacity {
                self.loaded -= toLoad ?? 0
                print("You have not enough space for \((toLoad)!)lt in your trunk. You can load only \(trunkCapacity - loaded)kg")
            } else {
                print("Loading done. Fullness of your trunk is \(loaded)kg now.")
            }            
        }
    }
    
    func unLoadInTrunk(toUnLoad: Int?) {
        if toUnLoad != nil { 
            if loaded  < toUnLoad! {
                print("You can't unload such a cargo. You have only \(loaded)kg in your trunk.")
            } else {
                self.loaded -= toUnLoad ?? 0 
                print("Unloading done. Fullness of your trunk is \(loaded)kg now.")
            }            
        }
    }  

    
}

extension Truck {
    enum TrailerSize{
        case big
        case medium
        case small
    }
    func addMoreCapacity(trailer: TrailerSize) { 
        if trailer == .big {
            self.trunkCapacity += 20000
            print("You choose trailer with additional capacity 20 ton. Now total capacity of your truck is \(trunkCapacity) kg.")
            
        } else if trailer == .medium {
            self.trunkCapacity += 10000
            print("You choose trailer with additional capacity 10 ton. Now total capacity of your truck is \(trunkCapacity) kg.")
            
        } else{
            self.trunkCapacity += 5000
            "You choose trailer with additional capacity 5 ton. Now total capacity of your truck is \(trunkCapacity) kg."
        }
    }
}
// 5. Создать несколько объектов каждого класса. Применить к ним различные действия.
var Mazda = SportCar(brand: "MAZDA", model: "GEISHA", configuration: .classic, year: 2021, trunkCapacity: 6000, loaded: 200, transmission: .auto)
print(Mazda.windows)
Mazda.windowSet(windowsAct: .open)
print(Mazda.windows)
Mazda.doorsSet(doorsAct: .open)
print(Mazda.doors)

var kia = SportCar(brand: "KIA", model: "Sportage", configuration: .premium, year: 2020, trunkCapacity: 5500, loaded: 0, transmission: .manual)

var volvo = Truck(brand: "VOLVO", model: "BigBoyTruck", year: 2019, trunkCapacity: 22000, loaded: 15000, type: .container)
volvo.addMoreCapacity(trailer: .big)
volvo.loadInTrunk(toLoad: 15000)
volvo.unLoadInTrunk(toUnLoad: 8600)
var kamaz = Truck(brand: "KAMAZ", model: "ZORRO", year: 1998, trunkCapacity: 25000, loaded: 0, type: .refrigerator)
kamaz.windowSet(windowsAct: .open)
print(kamaz.windows)

//6. Вывести сами объекты в консоль.
print(Mazda)
print(kia)

print(volvo)
print(kamaz)


